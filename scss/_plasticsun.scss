/*******************************************************************************
THEME COLORS
*/

$primary-color: #ec008c; // Also change the 'primary' color in FOundation's _settings.scss

// Adding a background tile to the body.
// create your own background noise at http://www.noisetexturegenerator.com/
body {
    background-image: url(../img/tile.png);
    background-repeat: repeat;
}

/*******************************************************************************
MIXINS
*/

// Ensures a smooth hovereffect to the classes you add this to:
// use as (example) @include hovereffect(all, 0.2s, ease-in-out);
@mixin hovereffect($transition-property, $transition-time, $method) {
    -webkit-transition: $transition-property $transition-time $method;
    -moz-transition: $transition-property $transition-time $method;
    -ms-transition: $transition-property $transition-time $method;
    -o-transition: $transition-property $transition-time $method;
    transition: $transition-property $transition-time $method;
}

// This effect is used on the h1 and h2 text in the siteheader. The simply fade in after a short delay.
@-webkit-keyframes fadeIn { from { opacity:0; } to { opacity:1; } }
@-moz-keyframes fadeIn { from { opacity:0; } to { opacity:1; } }
@keyframes fadeIn { from { opacity:0; } to { opacity:1; } }

.fade-in {
    opacity:0;  /* make things invisible upon start */
    -webkit-animation:fadeIn ease-in 1;  /* call our keyframe named fadeIn, use animattion ease-in and repeat it only 1 time */
    -moz-animation:fadeIn ease-in 1;
    animation:fadeIn ease-in 1;

    -webkit-animation-fill-mode:forwards;  /* this makes sure that after animation is done we remain at the last keyframe value (opacity: 1)*/
    -moz-animation-fill-mode:forwards;
    animation-fill-mode:forwards;

    -webkit-animation-duration:1s;
    -moz-animation-duration:1s;
    animation-duration:1s;

    -webkit-animation-delay: 0.7s;
    -moz-animation-delay: 0.7s;
    animation-delay: 0.7s;
}



/*******************************************************************************
SITEHEADER
*/

.siteheader {
    position: relative;
    width: 100%;
    background-image: url(../img/header.jpg);
    background-size: cover;
    background-position: center;

    h1, h2 {
        color:  $primary-color;
        text-shadow:0px 0px 2px #ffffff;
        margin: 0;
    }

    // full screen header (used on the frontpage)
    &.large {
        height: calc( 100vh - 76px ); // full view height minus title bar height

        .siteheader-content {
            @include absolute-center;
        }

        h1 {
            font-size: 5rem;
        }

    }

    // optional: half screen height
    &.medium {
        height: 50vh;

        .siteheader-content {
            @include absolute-center;
        }

        h1 {
            font-size: 3rem;
        }

    }

    // a small banner (used on all pages except the frontpage)
    &.small {

        h1 {
            font-size: 2rem;
            padding: 1rem 2.5rem;
        }

    }

}


/*******************************************************************************
NAVIGATION
*/

.title-bar {
    width: 100%;
}

// You can change the settings of all forms in _settings.scss. Below I just alter the search bar

#searchform-inline {
    margin-top: rem-calc(10); // Rem-calc is a Foundation function. Just add number in pixels. Foundation calculates it to rem

    input[type='search'] {
        border-left: none;
        border-right: none;
        border-top: none;
        border-bottom: 1px solid $primary-color;
        background-color: $black;
        box-shadow: none;
        color: $primary-color;

        &:focus {
            border-left: 1px solid #1A1A1A;
            border-right: 1px solid #1A1A1A;
            border-top: 1px solid #1A1A1A;
        }

    }

    button, .button {
        background-color: $black;
        padding: 0 .75rem;
    }

    svg#icon-search {
    fill: $primary-color;
    width: rem-calc(20);
    height: rem-calc(20);
    }

}

svg#icon-github {
    display: inline-block;
    width: rem-calc(16);
    height: rem-calc(16);
    fill: $primary-color;
    margin-right: .75rem;
    margin-top: -2px;
}

/*******************************************************************************
MAIN CONTENT
*/

.main-content {
    padding-top: 5rem;
    padding-bottom: 5rem;
}

.panel {
    background-color: $black;
    overflow: hidden;
}

.introduction {

    p {
        font-size: 1.25rem;
    }

}

/*******************************************************************************
SECTIONS
*/

.listing-wrapper {

    // Adding some space between the items in listings
    .columns {
        margin-bottom: 1.875rem; // 2x the padding for Foundation columns. Foundation standard padding = .9375rem x 2 = 1.875rem
    }

}

.about-wrapper {
    margin: 3rem 0;
}

.site-footer {
    background-color: $black;
    padding: 3rem 0;
    color: $white;
}

/*******************************************************************************
MEDIA
*/

.mediacontainer {
    position: relative;

    img {
        width: 100%;
        height: auto;
    }

    &.large {
        width: 100%;
        margin: 3rem 0;
    }

}

.mediacontainer-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    padding: .5rem;
    background: -moz-linear-gradient(top, rgba(0,0,0,0) 0%, rgba(0,0,0,.6) 100%); /* FF3.6-15 */
    background: -webkit-linear-gradient(top, rgba(0,0,0,0) 0%,rgba(0,0,0,.6) 100%); /* Chrome10-25,Safari5.1-6 */
    background: linear-gradient(to bottom, rgba(0,0,0,0) 0%,rgba(0,0,0,.6) 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#000000', endColorstr='#000000',GradientType=0 ); /* IE6-9 */

    p {
        color: $white;
        margin: 0;
        font-weight: 700;
    }

}

.listing-wrapper {
    // some effects for the listing images:
    // increases the image size on :hover and
    // darkens the image on :hover
    .mediacontainer {
        position: relative;
        -webkit-transform: scale3d(1, 1, 1);
        -moz-transform: scale3d(1, 1, 1);
        -ms-transform: scale3d(1, 1, 1);
        -o-transform: scale3d(1, 1, 1);
        opacity: 1;
        @include hovereffect(all, 0.3s, ease-in-out);

        &:hover {
            -webkit-transform: scale3d(1.025, 1.025, 1.025);
            -moz-transform: scale3d(1.025, 1.025, 1.025);
            -ms-transform: scale3d(1.025, 1.025, 1.025);
            -o-transform: scale3d(1.025, 1.025, 1.025);
            transform: scale3d(1.025, 1.025, 1.025);
            opacity: .6;
            @include hovereffect(all, 0.3s, ease-in-out);
        }

    }

}

